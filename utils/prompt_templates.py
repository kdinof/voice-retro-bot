"""Prompt template management for GPT interactions."""

from __future__ import annotations
from typing import Dict, Any, Optional
from enum import Enum
from dataclasses import dataclass

import structlog


logger = structlog.get_logger()


class PromptType(str, Enum):
    """Types of prompts for different processing needs."""
    TEXT_CLEANING = "text_cleaning"
    RETRO_STRUCTURING = "retro_structuring"
    ENERGY_PROCESSING = "energy_processing"
    MOOD_PROCESSING = "mood_processing"
    WINS_PROCESSING = "wins_processing"
    LEARNINGS_PROCESSING = "learnings_processing"
    ACTIONS_PROCESSING = "actions_processing"
    MITS_PROCESSING = "mits_processing"
    EXPERIMENT_PROCESSING = "experiment_processing"


@dataclass
class PromptTemplate:
    """Template for GPT prompts with metadata."""
    name: str
    system_prompt: str
    user_prompt_template: str
    version: str = "1.0"
    description: str = ""
    max_tokens: int = 1000
    temperature: float = 0.3
    
    def format_user_prompt(self, **kwargs) -> str:
        """Format user prompt template with provided variables."""
        try:
            return self.user_prompt_template.format(**kwargs)
        except KeyError as e:
            logger.error("Missing template variable", template=self.name, missing_var=str(e))
            raise ValueError(f"Missing template variable: {e}")


class PromptTemplateManager:
    """Manages prompt templates for different text processing tasks."""
    
    def __init__(self):
        self.templates: Dict[PromptType, PromptTemplate] = {}
        self._initialize_templates()
    
    def _initialize_templates(self):
        """Initialize all prompt templates."""
        
        # Text cleaning template
        self.templates[PromptType.TEXT_CLEANING] = PromptTemplate(
            name="text_cleaning",
            system_prompt="""–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
- –£–±—Ä–∞—Ç—å —Å–ª–æ–≤–µ—Å–Ω—ã–µ –ø–∞—Ä–∞–∑–∏—Ç—ã (—ç–º, –∞—Ö, –Ω—É, –∑–Ω–∞—á–∏—Ç, etc.)
- –£–±—Ä–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ç–∞—Ä—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä—ã
- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫ (—Ä—É—Å—Å–∫–∏–π)
- –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã
- –ù–ï –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- –í–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç""",
            user_prompt_template="–û—á–∏—Å—Ç–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ä–µ—á–∏:\n\n{raw_text}",
            description="Clean and structure transcribed speech text",
            max_tokens=500,
            temperature=0.1
        )
        
        # Energy level processing
        self.templates[PromptType.ENERGY_PROCESSING] = PromptTemplate(
            name="energy_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏:
1. –ß–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ (1-5)
2. –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "energy_level": 4,
  "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
}

–ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –ø–æ —Ç–æ–Ω—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é.""",
            user_prompt_template="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract energy level from user response",
            max_tokens=200,
            temperature=0.2
        )
        
        # Mood processing  
        self.templates[PromptType.MOOD_PROCESSING] = PromptTemplate(
            name="mood_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏:
1. –≠–º–æ–¥–∑–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª)
2. –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "mood_emoji": "üòä",
  "mood_explanation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
}

–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏: üòäüòåüòêüòîüò§üò¥ü§îüí™üéâüòé""",
            user_prompt_template="–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract mood from user response",
            max_tokens=200,
            temperature=0.3
        )
        
        # Wins processing
        self.templates[PromptType.WINS_PROCESSING] = PromptTemplate(
            name="wins_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–±–µ–¥ –¥–Ω—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ –ø–æ–±–µ–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–Ω—è.
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∫–∞–∂–¥—É—é –ø–æ–±–µ–¥—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫:
[
  "–ó–∞–≤–µ—Ä—à–∏–ª –≤–∞–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
  "–í—ã—É—á–∏–ª –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é",
  "–ü–æ–º–æ–≥ –∫–æ–ª–ª–µ–≥–µ —Å –∑–∞–¥–∞—á–µ–π"
]

–ï—Å–ª–∏ –ø–æ–±–µ–¥ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].""",
            user_prompt_template="–ò–∑–≤–ª–µ–∫–∏ –ø–æ–±–µ–¥—ã –¥–Ω—è –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract wins from user response",
            max_tokens=300,
            temperature=0.2
        )
        
        # Learnings processing
        self.templates[PromptType.LEARNINGS_PROCESSING] = PromptTemplate(
            name="learnings_processing", 
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –¥–Ω—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ —É—Ä–æ–∫–∏, –∏–Ω—Å–∞–π—Ç—ã –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è.
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∫–∞–∂–¥—ã–π —É—Ä–æ–∫ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫:
[
  "–í–∞–∂–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏",
  "–ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á",
  "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
]

–ï—Å–ª–∏ —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].""",
            user_prompt_template="–ò–∑–≤–ª–µ–∫–∏ —É—Ä–æ–∫–∏ –¥–Ω—è –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract learnings from user response",
            max_tokens=300,
            temperature=0.2
        )
        
        # Next actions processing
        self.templates[PromptType.ACTIONS_PROCESSING] = PromptTemplate(
            name="actions_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫:
[
  "–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
  "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ 10:00",
  "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É"
]

–ï—Å–ª–∏ –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].""",
            user_prompt_template="–ò–∑–≤–ª–µ–∫–∏ –ø–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract next actions from user response",
            max_tokens=300,
            temperature=0.2
        )
        
        # MITs (Most Important Tasks) processing
        self.templates[PromptType.MITS_PROCESSING] = PromptTemplate(
            name="mits_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–≤—Ç—Ä–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1-3 —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (MITs).
–≠—Ç–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–µ—Å—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ (–º–∞–∫—Å–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞):
[
  "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞",
  "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"
]

–ï—Å–ª–∏ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].""",
            user_prompt_template="–û–ø—Ä–µ–¥–µ–ª–∏ 1-3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤—Ç—Ä–∞ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract most important tasks from user response",
            max_tokens=200,
            temperature=0.2
        )
        
        # Experiment processing
        self.templates[PromptType.EXPERIMENT_PROCESSING] = PromptTemplate(
            name="experiment_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ:
- –ß—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
- –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –ö–∞–∫ –±—É–¥–µ—Ç –∏–∑–º–µ—Ä—è—Ç—å —É—Å–ø–µ—Ö

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "experiment": "–æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞", 
  "expected_outcome": "–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
  "success_criteria": "–∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞"
}

–ï—Å–ª–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}.""",
            user_prompt_template="–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract experiment from user response",
            max_tokens=300,
            temperature=0.3
        )
        
        logger.info("Initialized prompt templates", count=len(self.templates))
    
    def get_template(self, prompt_type: PromptType) -> PromptTemplate:
        """Get prompt template by type."""
        if prompt_type not in self.templates:
            raise ValueError(f"Unknown prompt type: {prompt_type}")
        
        return self.templates[prompt_type]
    
    def get_all_templates(self) -> Dict[PromptType, PromptTemplate]:
        """Get all available templates."""
        return self.templates.copy()
    
    def add_custom_template(self, prompt_type: PromptType, template: PromptTemplate):
        """Add or update a custom template."""
        self.templates[prompt_type] = template
        logger.info("Added custom template", type=prompt_type, name=template.name)
    
    def validate_template_variables(self, prompt_type: PromptType, **kwargs) -> bool:
        """Validate that all required template variables are provided."""
        template = self.get_template(prompt_type)
        
        try:
            template.format_user_prompt(**kwargs)
            return True
        except ValueError:
            return False
    
    def get_template_info(self, prompt_type: PromptType) -> Dict[str, Any]:
        """Get template information and metadata."""
        template = self.get_template(prompt_type)
        
        return {
            "name": template.name,
            "description": template.description,
            "version": template.version,
            "max_tokens": template.max_tokens,
            "temperature": template.temperature,
            "system_prompt_length": len(template.system_prompt),
            "user_template_length": len(template.user_prompt_template)
        }


# Global template manager instance
prompt_manager = PromptTemplateManager()