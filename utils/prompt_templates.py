"""Prompt template management for GPT interactions."""

from __future__ import annotations
from typing import Dict, Any, Optional
from enum import Enum
from dataclasses import dataclass

import structlog


logger = structlog.get_logger()


class PromptType(str, Enum):
    """Types of prompts for different processing needs."""
    ENERGY_PROCESSING = "energy_processing"
    MOOD_PROCESSING = "mood_processing"
    WINS_PROCESSING = "wins_processing"
    LEARNINGS_PROCESSING = "learnings_processing"
    ACTIONS_PROCESSING = "actions_processing"
    MITS_PROCESSING = "mits_processing"
    EXPERIMENT_PROCESSING = "experiment_processing"
    TODO_GENERATION = "todo_generation"


@dataclass
class PromptTemplate:
    """Template for GPT prompts with metadata."""
    name: str
    system_prompt: str
    user_prompt_template: str
    version: str = "1.0"
    description: str = ""
    max_tokens: int = 1000
    temperature: float = 0.3
    
    def format_user_prompt(self, **kwargs) -> str:
        """Format user prompt template with provided variables."""
        try:
            return self.user_prompt_template.format(**kwargs)
        except KeyError as e:
            logger.error("Missing template variable", template=self.name, missing_var=str(e))
            raise ValueError(f"Missing template variable: {e}")


class PromptTemplateManager:
    """Manages prompt templates for different text processing tasks."""
    
    def __init__(self):
        self.templates: Dict[PromptType, PromptTemplate] = {}
        self._initialize_templates()
    
    def _initialize_templates(self):
        """Initialize all prompt templates."""
        
        # Energy level processing
        self.templates[PromptType.ENERGY_PROCESSING] = PromptTemplate(
            name="energy_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏:
1. –ß–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ (1-5)
2. –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "energy_level": 4,
  "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
}

–ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω —è–≤–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –ø–æ —Ç–æ–Ω—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é.""",
            user_prompt_template="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract energy level from user response",
            max_tokens=200,
            temperature=0.2
        )
        
        # Mood processing  
        self.templates[PromptType.MOOD_PROCESSING] = PromptTemplate(
            name="mood_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∏:
1. –≠–º–æ–¥–∑–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–æ–¥–∏–Ω —Å–∏–º–≤–æ–ª)
2. –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "mood_emoji": "üòä",
  "mood_explanation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
}

–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏: üòäüòåüòêüòîüò§üò¥ü§îüí™üéâüòé""",
            user_prompt_template="–û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract mood from user response",
            max_tokens=200,
            temperature=0.3
        )
        
        # Wins processing
        self.templates[PromptType.WINS_PROCESSING] = PromptTemplate(
            name="wins_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–±–µ–¥ –¥–Ω—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–°–ï –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø–æ–±–µ–¥—ã –∏ —Ö–æ—Ä–æ—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –¥–Ω—è.
–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:
- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã
- –•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (—Å–æ–Ω, –µ–¥–∞, —Å–ø–æ—Ä—Ç, –ø—Ä–æ–≥—É–ª–∫–∏)  
- –í—Ä–µ–º—è —Å —Å–µ–º—å–µ–π –∏ –¥—Ä—É–∑—å—è–º–∏
- –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏
- –õ–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
- –ü—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –¥–Ω—è

–í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å "–ø–æ—Å–ø–∞–ª", "–ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–ª", "–ø–æ–≥—É–ª—è–ª —Å —Å—ã–Ω–æ–º" - —ç—Ç–æ –≤—Å–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–∞–º–∏!

–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∫–∞–∂–¥—É—é –ø–æ–±–µ–¥—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–Ω—è—Ç–Ω—ã–π –ø—É–Ω–∫—Ç.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫:
[
  "–•–æ—Ä–æ—à–æ –ø–æ—Å–ø–∞–ª",
  "–û—Ç–ª–∏—á–Ω–æ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–ª", 
  "–ü–æ–≥—É–ª—è–ª —Å —Å—ã–Ω–æ–º"
]

–ï—Å–ª–∏ –ø–æ–±–µ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].""",
            user_prompt_template="–ò–∑–≤–ª–µ–∫–∏ –í–°–ï –ø–æ–±–µ–¥—ã –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–Ω—è –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract wins from user response",
            max_tokens=300,
            temperature=0.2
        )
        
        # Learnings processing
        self.templates[PromptType.LEARNINGS_PROCESSING] = PromptTemplate(
            name="learnings_processing", 
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤ –¥–Ω—è –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–°–ï —É—Ä–æ–∫–∏, –∏–Ω—Å–∞–π—Ç—ã, –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏.
–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:
- –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏
- –ü–æ–Ω–∏–º–∞–Ω–∏—è –æ —Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö
- –ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
- –ò–Ω—Å–∞–π—Ç—ã –æ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
- –î–∞–∂–µ –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞–≤—ã–∫–∏ ("–Ω–∞—É—á–∏–ª—Å—è —Å–ø–∞—Ç—å", "–Ω–∞—É—á–∏–ª—Å—è –∏–≥—Ä–∞—Ç—å—Å—è —Å —Å—ã–Ω–æ–º")

–í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å. "–ù–∞—É—á–∏–ª—Å—è —Å–ø–∞—Ç—å", "–Ω–∞—É—á–∏–ª—Å—è –∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å" - —ç—Ç–æ —Ç–æ–∂–µ –æ–±—É—á–µ–Ω–∏–µ!

–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∫–∞–∂–¥—ã–π —É—Ä–æ–∫ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–Ω—è—Ç–Ω—ã–π –ø—É–Ω–∫—Ç.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫:
[
  "–í–∞–∂–Ω–æ—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞",
  "–ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å —Å–µ–º—å–µ–π",
  "–ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á"
]

–ï—Å–ª–∏ —É—Ä–æ–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].""",
            user_prompt_template="–ò–∑–≤–ª–µ–∫–∏ –í–°–ï —É—Ä–æ–∫–∏ –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract learnings from user response",
            max_tokens=300,
            temperature=0.2
        )
        
        # Next actions processing
        self.templates[PromptType.ACTIONS_PROCESSING] = PromptTemplate(
            name="actions_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–°–ï –¥–µ–π—Å—Ç–≤–∏—è, –ø–ª–∞–Ω—ã –∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –±—É–¥—É—â–µ–µ.
–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:
- –†–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã
- –õ–∏—á–Ω—ã–µ –¥–µ–ª–∞ –∏ –ø–ª–∞–Ω—ã
- –í—Å—Ç—Ä–µ—á–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
- –û–±—ã—á–Ω—ã–µ –¥–µ–ª–∞ ("—Ä–∞–±–æ—Ç–∞", "–≤—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞")
- –°–µ–º–µ–π–Ω—ã–µ –ø–ª–∞–Ω—ã
- –°–ø–æ—Ä—Ç –∏ —Ö–æ–±–±–∏

–í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å. "–£ –º–µ–Ω—è —Ä–∞–±–æ—Ç–∞", "–≤—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞" - —Ç–æ–∂–µ –ø–ª–∞–Ω—ã!

–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–Ω—è—Ç–Ω—ã–π –ø—É–Ω–∫—Ç.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫:
[
  "–ò–¥—Ç–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É",
  "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Ç–µ–∫—É—â–∏–º–∏ –¥–µ–ª–∞–º–∏",
  "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π"
]

–ï—Å–ª–∏ –ø–ª–∞–Ω–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].""",
            user_prompt_template="–ò–∑–≤–ª–µ–∫–∏ –í–°–ï –ø–ª–∞–Ω—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract next actions from user response",
            max_tokens=300,
            temperature=0.2
        )
        
        # MITs (Most Important Tasks) processing
        self.templates[PromptType.MITS_PROCESSING] = PromptTemplate(
            name="mits_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–ª–∞–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞–≤—Ç—Ä–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1-3 —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (MITs).
–≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å:
- –ö–ª—é—á–µ–≤—ã–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏
- –í–∞–∂–Ω—ã–µ –ª–∏—á–Ω—ã–µ –¥–µ–ª–∞  
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
- –í–∞–∂–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è
- –°–ø–æ—Ä—Ç –∏ –∑–¥–æ—Ä–æ–≤—å–µ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç–æ –∫–∞–∫ –≤–∞–∂–Ω–æ–µ)

–í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å. "–ö—Ä–æ—Å—Å—Ñ–∏—Ç", "—Ä–∞–±–æ—Ç–∞" - –µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç–æ –∫–∞–∫ –≤–∞–∂–Ω–æ–µ, –≤–∫–ª—é—á–∞–π!

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ (–º–∞–∫—Å–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞):
[
  "–ó–∞–Ω—è—Ç—å—Å—è –∫—Ä–æ—Å—Å—Ñ–∏—Ç–æ–º",
  "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏",
  "–í–∞–∂–Ω—ã–µ –ª–∏—á–Ω—ã–µ –¥–µ–ª–∞"
]

–ï—Å–ª–∏ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].""",
            user_prompt_template="–û–ø—Ä–µ–¥–µ–ª–∏ 1-3 –°–ê–ú–´–ï –í–ê–ñ–ù–´–ï –∑–∞–¥–∞—á–∏ –∑–∞–≤—Ç—Ä–∞ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract most important tasks from user response",
            max_tokens=200,
            temperature=0.2
        )
        
        # Experiment processing
        self.templates[PromptType.EXPERIMENT_PROCESSING] = PromptTemplate(
            name="experiment_processing",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞—Ö.

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ:
- –ß—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
- –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –ö–∞–∫ –±—É–¥–µ—Ç –∏–∑–º–µ—Ä—è—Ç—å —É—Å–ø–µ—Ö

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "experiment": "–æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞", 
  "expected_outcome": "–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
  "success_criteria": "–∫—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞"
}

–ï—Å–ª–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}.""",
            user_prompt_template="–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n{user_input}",
            description="Extract experiment from user response",
            max_tokens=300,
            temperature=0.3
        )
        
        # Todo generation from retro
        self.templates[PromptType.TODO_GENERATION] = PromptTemplate(
            name="todo_generation",
            system_prompt="""–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–µ–∫—Ü–∏–∏ "Next Actions" –∏ "Tomorrow's MITs" –∏–∑ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª.

–í–ê–ñ–ù–û:
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—É—é —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—É—é —Ä–µ—á—å
- –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
- "–†–∞–±–æ—Ç–∞" -> "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Ä–∞–±–æ—á–∏–º–∏ –¥–µ–ª–∞–º–∏"
- "–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞" -> "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–µ–ª–∞"
- "–ö—Ä–æ—Å—Å—Ñ–∏—Ç" -> "–ó–∞–Ω—è—Ç—å—Å—è –∫—Ä–æ—Å—Å—Ñ–∏—Ç–æ–º"

–°–æ–∑–¥–∞–π –î–í–ê –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞:
1. –ò–∑ —Å–µ–∫—Ü–∏–∏ "Next Actions" - –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–ª–∞
2. –ò–∑ —Å–µ–∫—Ü–∏–∏ "Tomorrow's MITs" - —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å–∏–º—É–º 3)

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "next_actions_todos": [
    "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Ä–∞–±–æ—á–∏–º–∏ –¥–µ–ª–∞–º–∏",
    "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–µ–ª–∞",
    "–í—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π"
  ],
  "mits_todos": [
    "–ó–∞–Ω—è—Ç—å—Å—è –∫—Ä–æ—Å—Å—Ñ–∏—Ç–æ–º", 
    "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∞–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
    "–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º"
  ]
}

–ï—Å–ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ —Å–µ–∫—Ü–∏–∏ –Ω–µ—Ç –¥–µ–ª, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].""",
            user_prompt_template="–°–æ–∑–¥–∞–π —Å–ø–∏—Å–∫–∏ –¥–µ–ª –∏–∑ —ç—Ç–æ–π —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã:\n\nNext Actions:\n{next_actions_text}\n\nTomorrow's MITs:\n{mits_text}",
            description="Generate todo lists from retro sections",
            max_tokens=400,
            temperature=0.2
        )
        
        logger.info("Initialized prompt templates", count=len(self.templates))
    
    def get_template(self, prompt_type: PromptType) -> PromptTemplate:
        """Get prompt template by type."""
        if prompt_type not in self.templates:
            raise ValueError(f"Unknown prompt type: {prompt_type}")
        
        return self.templates[prompt_type]
    
    def get_all_templates(self) -> Dict[PromptType, PromptTemplate]:
        """Get all available templates."""
        return self.templates.copy()
    
    def add_custom_template(self, prompt_type: PromptType, template: PromptTemplate):
        """Add or update a custom template."""
        self.templates[prompt_type] = template
        logger.info("Added custom template", type=prompt_type, name=template.name)
    
    def validate_template_variables(self, prompt_type: PromptType, **kwargs) -> bool:
        """Validate that all required template variables are provided."""
        template = self.get_template(prompt_type)
        
        try:
            template.format_user_prompt(**kwargs)
            return True
        except ValueError:
            return False
    
    def get_template_info(self, prompt_type: PromptType) -> Dict[str, Any]:
        """Get template information and metadata."""
        template = self.get_template(prompt_type)
        
        return {
            "name": template.name,
            "description": template.description,
            "version": template.version,
            "max_tokens": template.max_tokens,
            "temperature": template.temperature,
            "system_prompt_length": len(template.system_prompt),
            "user_template_length": len(template.user_prompt_template)
        }


# Global template manager instance
prompt_manager = PromptTemplateManager()